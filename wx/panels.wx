%textures = 'Interface\AddOns\ephemeral\textures'

Panel epConsole(^UIParent, frameStrata: HIGH, hidden):
  !Size(400, 400)
  !Center
  TabbedFrame $parentTabs(.tabs):
    !TopLeft(10, -31)
    !BottomRight(-10, 33)
    MessageFrameBase $parentInterpreter(hidden):
      !TopLeft(0, -20)
      !BottomRight
    MessageFrameBase $parentLog(hidden):
      !TopLeft(0, -20)
      !BottomRight
    OnLoad:
      *ep.TabbedFrame(self, {tabs={
      *  {label=ep_'Interpreter', client=epConsoleTabsInterpreter},
      *  {label=ep_'Debug Log', client=epConsoleTabsLog},
      *}})
  EditBox $parentInput(.input, font: epConsoleFont):
    !BottomLeft(10, 10)
    !BottomRight(-10, 10)
    OnEnterPressed:
      *self:parent():submit()
    OnLoad:
      *ep.EditBox(self, {historyEnabled=true, historyTable='ephemeral.consoleHistory'})
  OnLoad:
    *ep.Console(self)

Panel epColorBrowser(^UIParent, frameStrata: HIGH, hidden):
  !Size(370, 300)
  !Center
  !Border:
    Texture $parentLowerDivider(epControlInnerEdgeB, .lowerDivider):
      !BottomLeft(5, 30)
      !BottomRight(-5, 30)
  ColorSelect $parentWheel(epControl, .wheel, enableMouse):
    !Size(207, 159)
    !TopLeft(11, -32)
    ColorWheelTexture:
      !Size(139, 139)
      !TopLeft(10, -10)
    ColorWheelThumbTexture(file: 'Interface\Buttons\UI-ColorPicker-Buttons'):
      !Size(10, 10)
      !TexCoords(0, 0.15625, 0, 0.625)
    ColorValueTexture:
      !Size(32, 139)
      !TopLeft(161, -10)
    ColorValueThumbTexture(file: 'Interface\Buttons\UI-ColorPicker-Buttons'):
      !Size(48, 14)
      !TexCoords(0.25, 1.0, 0.0, 0.875)
    OnColorSelect:
      *if not self.suppressEvent then
      *  self:GetParent():setColor({self:GetColorRGB()})
      *end
      *self.suppressEvent = nil
  Frame $parentColors(epControl, .colors):
    !Size(80, 44)
    !TopRight(-11, -32)
    !Artwork:
      FontString(epLabelFont, .currentLabel, text: 'Current:'):
        !Anchor(point: TOPRIGHT, relativeTo: $parent, relativePoint: TOPLEFT, x: -4, y: -6)
      FontString(epLabelFont, .originalLabel, text: 'Original:'):
        !Anchor(point: TOPRIGHT, relativeTo: $parent, relativePoint: TOPLEFT, x: -4, y: -26)
      Texture $parentCurrent(.current):
        !Size(y:19)
        !TopLeft(3, -3)
        !TopRight(-3, -3)
        !Color(0, 0, 0)
    Frame $parentOriginal(.original):
      !Size(y: 19)
      !TopLeft(3, -22)
      !TopRight(-3, -22)
      !Background:
        Texture $parentTexture(.texture, setAllPoints):
          !Color(1, 0, 0)
      OnMouseDown:
        *self:GetParent():GetParent():revertToOriginal()
  Spinner $parentRValue(.rValue):
    !Size(60, 19)
    !TopRight(-31, -80)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'Red:')
    OnLoad:
      *ep.Spinner(self, {minimum=0, maximum=255, onValueChanged=
      *  {ep.ColorBrowser.updateColor, self:GetParent(), 'red'}})
  Spinner $parentGValue(.gValue):
    !Size(60, 19)
    !TopRight(-31, -103)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'Green:')
    OnLoad:
      *ep.Spinner(self, {minimum=0, maximum=255, onValueChanged=
      *  {ep.ColorBrowser.updateColor, self:GetParent(), 'green'}})
  Spinner $parentBValue(.bValue):
    !Size(60, 19)
    !TopRight(-31, -126)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'Blue:')
    OnLoad:
      *ep.Spinner(self, {minimum=0, maximum=255, onValueChanged=
      *  {ep.ColorBrowser.updateColor, self:GetParent(), 'blue'}})
  Spinner $parentAValue(.aValue):
    !Size(60, 19)
    !TopRight(-31, -149)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'Alpha:')
    OnLoad:
      *ep.Spinner(self, {minimum=0, maximum=255, onValueChanged=
      *  {ep.ColorBrowser.updateColor, self:GetParent(), 'alpha'}})
  EditBox $parentHexValue(.hexValue):
    !Size(80, 19)
    !TopRight(-11, -172)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'Hex:')
  Button $parentCancel(.cancelButton, text: 'Cancel'):
    !Size(80, 19)
    !BottomRight(-95, 11)
    OnClick:
      *self:GetParent():cancel()
  Button $parentSelect(.selectButton, text: 'Select'):
    !Size(80, 19)
    !BottomRight(-11, 11)
    OnClick:
      *self:GetParent():select()
  OnLoad:
    *ep.ColorBrowser(self)

Button epDrawerButton(NoInherit, virtual):
  !Size(18, 18)
  !Border:
    Texture(epControlEdgeR):
      !TopRight(10, 4)
      !BottomRight(10, -3)
  !HitRectInsets(-2, -2, -2, -2)

Frame epDrawer(^UIParent, frameStrata: DIALOG):
  !Size(400, 200)
  !Top
  Frame $parentRibbon(epPanel, .ribbon):
    !Size(198, 37)
    !TopLeft
    Button $parentToggle(NoInherit, .toggle):
      !TopLeft(9, -19)
      !Size(10, 10)
      !HitRectInsets(-3, -3, -13, -3)
      NormalTexture(epDownIcon)
      HighlightTexture(epDownHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epDownDisabledIcon)
    Button $parentHome(epDrawerButton, .home):
      !TopLeft(26, -10)
      NormalTexture(epHomeIcon)
      HighlightTexture(epHomeHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epHomeDisabledIcon)
      OnClick:
        *epHome:display()
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-home-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
    Button $parentBackpack(epDrawerButton, .backpack):
      !TopLeft(50, -10)
      NormalTexture(epBackpackIcon)
      HighlightTexture(epBackpackHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epBackpackDisabledIcon)
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-backpack-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
    Button $parentCharacter(epDrawerButton, .character):
      !TopLeft(74, -10)
      NormalTexture(epShieldIcon)
      HighlightTexture(epShieldHighlightedIcon, alphaMode: ADD)
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-character-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
      DisabledTexture(epShieldDisabledIcon)
    Button $parentBook(epDrawerButton, .book):
      !TopLeft(98, -10)
      NormalTexture(epBookIcon)
      HighlightTexture(epBookHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epBookDisabledIcon)
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-book-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
    Button $parentHelp(epDrawerButton, .help):
      !TopLeft(122, -10)
      NormalTexture(epHelpIcon)
      HighlightTexture(epHelpHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epHelpDisabledIcon)
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-help-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
    Button $parentReload(epDrawerButton, .reload):
      !TopLeft(146, -10)
      NormalTexture(epReloadIcon)
      HighlightTexture(epReloadHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epReloadDisabledIcon)
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-reload-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
    Button $parentPause(epDrawerButton, .pause):
      !TopLeft(170, -10)
      !Size(18, 18)
      !HitRectInsets(-2, -2, -2, -2)
      NormalTexture(epPauseIcon)
      HighlightTexture(epPauseHighlightedIcon, alphaMode: ADD)
      DisabledTexture(epPauseDisabledIcon)
      OnLoad:
        *ep.Button(self, {tooltip={c=ep_'$drawer-pause-button-tooltip',
        *  location={hook='BOTTOMLEFT', x=-7, y=-1}}})
    OnLoad:
      *ep.Drawer(self)

Panel epHome(^UIParent, frameStrata: HIGH, hidden):
  !Size(400, 300)
  !Center
  TabbedFrame $parentTabs(.tabs):
    !TopLeft(10, -31)
    !BottomRight(-10, 10)
    Frame $parentSummary(.summary, hidden):
      !TopLeft(0, -20)
      !BottomRight
    Frame $parentModules(.modules, hidden):
      !TopLeft(0, -20)
      !BottomRight
    Frame $parentSettings(.settings, hidden):
      !TopLeft(0, -20)
      !BottomRight
    Frame $parentLogs(.logs, hidden):
      !TopLeft(0, -20)
      !BottomRight
    Frame $parentAbout(.about, hidden):
      !TopLeft(0, -20)
      !BottomRight
    OnLoad:
      *ep.TabbedFrame(self, {showBottomBorder=true, tabs={
      *  {label=ep_'Summary', client='Summary'},
      *  {label=ep_'Modules', client='Modules'},
      *  {label=ep_'Settings', client='Settings'},
      *  {label=ep_'Logs', client='Logs'},
      *  {label=ep_'About', client='About'}
      *}})
  OnLoad:
    *ep.Home(self)

IconBox epIconBrowserButton(virtual):
  OnClick:
    *if IsControlKeyDown() then
    *  d(self.icon..': '..self.texture:GetTexture())
    *else
    *  epIconBrowser:select(self.icon)
    *end
  OnLoad:
    *ep.IconBrowserButton(self)
  OnMouseWheel:
    *epIconBrowserScrollBar:move(-delta)

Panel epIconBrowser(^UIParent, frameStrata: HIGH, hidden):
  !Size(222, 312)
  !Center
  Frame $parentContainer(.container):
    !TopLeft(10, -31)
    !BottomRight(-33, 33)
    OnMouseWheel:
      *epIconBrowserScrollBar:move(-delta)
  Frame $parentBackdrop(epControlEdge, .backdrop, hidden):
    !TopLeft(10, -31)
    !BottomRight(-33, 33)
  VerticalSlider $parentScrollBar(.scrollbar):
    !TopRight(-10, -47)
    !BottomRight(-10, 49)
    OnLoad:
      *ep.Slider(self, {callback={ep.IconBrowser.update, self:GetParent()}})
  DropBox $parentSet(.setDropbox, text: 'All Sets'):
    !BottomLeft(10, 10)
    !BottomRight(-125, 10)
    OnLoad:
      *ep.DropBox(self, {
      *  onValueChanged = {ep.IconBrowser.setSet, self:GetParent()},
      *  items = {{'all', 'All Sets'}},
      *  value = 'all',
      *})
  DropBox $parentCategory(.categoryDropbox, text: 'All Icons'):
    !Size(111, 19)
    !BottomRight(-10, 10)
    OnClick:
      *self.menu:toggle()
  OnLoad:
    *ep.IconBrowser(self)

Frame epIconCursor(hidden):
  OnLoad:
    *ep.IconCursor(self)
  OnUpdate:
    *self:update()

IconBox epRibbonButton(virtual):
  OnClick:
    *self.ribbon:manipulate(self, 'click', button)
  OnDragStart:
    *self.ribbon:manipulate(self, 'drag', button)
  OnDragStop:
    *self.ribbon:manipulate(self, 'drop')
  OnDoubleClick:
    *self.ribbon:manipulate(self, 'dblclick', button)
  OnEnter:
    *self.ribbon:manipulate(self, 'enter')
  OnLeave:
    *self.ribbon:manipulate(self, 'leave')
  OnLoad:
    *self:RegisterForClicks('LeftButtonUp', 'RightButtonUp')
    *self:RegisterForDrag('LeftButton', 'RightButton')
    *ep.RibbonButton(self)

Panel epRibbon(virtual):
  !Size(200, 42)
  Frame $parentContainer(.container):
    !TopLeft(27, -10)
    !BottomRight(-10, 10)
  Frame $parentBackdrop(epControlEdge, .backdrop, hidden):
    !TopLeft(27, -10)
    !BottomRight(-10, 10)
  OnLoad:
    *ep.Ribbon(self)

Frame epTestRibbon(epRibbon, ^UIParent, hidden):
  !Center
  OnLoad:
    *ep.Ribbon(self)
    *--self:display()

Panel epTest(^UIParent, frameStrata: HIGH, hidden):
  !Size(400, 400)
  !Center
  Button $parentButton(text: 'Test This'):
    !Size(80, 19)
    !TopLeft(12, -32)
  CheckBox $parentCheckBox(text: 'enabled'):
    !TopLeft(12, -55)
  DropBox $parentDropBox:
    !Size(110, 19)
    !TopLeft(12, -75)
    OnLoad:
      *ep.DropBox(self, {default = 'nn', items = {
      *  {'nn', 'None'}, {'bk', 'Back'}, {'bh', 'Both Hands'}
      *}})
  ComboBox $parentComboBox:
    !Size(110, 19)
    !TopLeft(12, -98)
    OnLoad:
      *ep.ComboBox(self, {default = 'nn', items = {
      *  {'nn', 'None'}, {'bk', 'Back'}, {'bh', 'Both Hands'}
      *}})
  IconBox $parentIconBox:
    !TopLeft(100, -32)
    OnLoad:
      *ep.IconBox(self, {enableBrowsing=true})
      *self.texture:SetTexture('interface\\icons\\inv_sword_109')
  ColorSpot $parentColorSpot:
    !TopLeft(150, -32)
  ListBuilder $parentList:
    !Size(200, 25)
    !TopLeft(180, -32)
    OnLoad:
      *ep.ListBuilder(self, {placeholder='facets'})
  MultiButton $parentMultiButton(text: 'Save'):
    !Size(100, 19)
    !TopLeft(180, -75)
    OnLoad:
      *ep.MultiButton(self, {
      *  items = {
      *    {label = 'Discard', callback = function() d('Discard selected.') end}
      *  }
      *})
  Tree $parentTree:
    !Size(180, 170)
    !TopLeft(240, -121)
    OnLoad:
      *ep.Tree(self, {items=ep.testitems, defaultExpansion=1})
  EditArea $parentEditArea:
    !Size(200, 120)
    !TopLeft(12, -121)
  EditBox $parentEditBox:
    !Size(160, 19)
    !TopLeft(12, -245)
    OnLoad:
      *ep.EditBox(self, {placeholder='label', clearable=true})
  Spinner $parentSpinner:
    !Size(80, 19)
    !TopLeft(12, -268)
  Spinner $parentValueSpinner:
    !Size(140, 19)
    !TopLeft(12, -291)
    OnLoad:
      *ep.Spinner(self, {values={'alpha', 'beta', 'gamma', 'delta'}, value='alpha'})
  Grid $parentGrid:
    !TopLeft(12, -314)
    !BottomRight(-12, 12)
    OnLoad:
      *ep.Grid(self, {header = true, data = ep.testdata, cells = {
      *  {control = 'checkbox'},
      *  {field = 'id', title = 'Id', width = 60},
      *  {field = 'name', title = 'Name', width = 80},
      *  {field = 'description', title = 'Description', relWidth = 0.75},
      *  {field = 'value', title = 'Value', relWidth = 0.25}}})
  OnLoad:
    *ep.BasePanel(self, {
    *    title = 'Test',
    *    resizable = true,
    *    minsize = {300, 300},
    *    maxsize = {800, 800},
    *    initsize = {600, 600},
    *})

Frame epLocation(^UIParent):
  !Size(300, 300)
  !TopLeft(20, -110)
  !Artwork:
    FontString $parentText(epNormalFont, .text, justifyH: LEFT, justifyV: TOP, setAllPoints):
      !Color(1.0, 1.0, 1.0)
  OnUpdate:
    *--self.text:SetText(ep.describeLocation())
    *--[[local flags = {}
    *if IsIndoors() then tinsert(flags, 'Indoors') end
    *if IsFlying() then tinsert(flags, 'Flying') end
    *if IsMounted() then tinsert(flags,'Mounted') end
    *if IsSwimming() then tinsert(flags, 'Swimming') end
    *local x, y = GetPlayerMapPosition('player')
    *local stats = {}
    *tinsert(stats, 'MapID: '..GetCurrentMapAreaID())
    *tinsert(stats, 'MapZone: '..GetCurrentMapZone())
    *tinsert(stats, 'Level: '..GetCurrentMapDungeonLevel()..' of '..GetNumDungeonMapLevels())
    *tinsert(stats, 'Position: '..format('%d   %d', math.floor(x * 10000), math.floor(y * 10000)))
    *tinsert(stats, 'Facing: '..format('%0.3f', GetPlayerFacing()))
    *tinsert(stats, '')
    *tinsert(stats, 'Zone: '..GetZoneText())
    *tinsert(stats, 'Subzone: '..GetSubZoneText())
    *tinsert(stats, 'Real zone: '..GetRealZoneText())
    *if #flags > 0 then
    *    tinsert(stats, '')
    *    tinsert(stats, table.concat(flags, ' '))
    *end
    *local px, py = ep.proper_loc()
    *if type(px) ~= 'nil' then
    *   local dx, dy = ep.proper_loc(true)
    *   tinsert(stats, '')
    *   tinsert(stats, 'Proper loc: '..px..', '..py)
    *   tinsert(stats, 'Decimal loc: '..format('%0.5f, %0.5f', dx, dy))
    *end
    *self.text:SetText(table.concat(stats, '\n'))]]
