Button epItemIcon(epIconBox, virtual):
  OnClick:
    *self.container:manipulate(self, 'click', button)
  OnDragStart:
    *self.container:manipulate(self, 'drag', button)
  OnDragStop:
    *self.container:manipulate(self, 'drop')
  OnDoubleclick:
    *self.container:manipulate(self, 'dblclick', button)
  OnEnter:
    *self.container:manipulate(self, 'enter')
  OnLeave:
    *self.container:manipulate(self, 'leave')
  OnLoad:
    *self:RegisterForClicks('LeftButtonUp', 'MiddleButtonUp', 'RightButtonUp')
    *self:RegisterForDrag('LeftButton')
    *ep.iconbox(self)
  OnMouseWheel:
    *self.container:manipulate(self, 'wheel', delta)
    *local scrollbar = self:GetParent().scrollbar
    *if scrollbar then
    *  scrollbar:move(-delta)
    *end

Frame epItemCollector(epPanel, ^UIParent, frameStrata: DIALOG, hidden, virtual):
  !Size(207, 354)
  !Center
  !Artwork:
    FontString $parentText(epNormalFont, .text, justifyH: LEFT, justifyV: MIDDLE, maxLines: 2):
      !Size(y: 38)
      !TopLeft(52, -31)
      !TopRight(-10, -31)
  Button $parentIcon(epIconBox, .icon):
    !TopLeft(10, -31)
    OnLoad:
      *ep.iconbox(self, {enableBrowsing=true})
  Frame $parentContainer(.container):
    !TopLeft(10, -73)
    !BottomRight(-33, 33)
  Frame $parentBackdrop(epControlEdge, .backdrop, hidden):
    !TopLeft(10, -73)
    !BottomRight(-33, 33)
  Slider $parentScrollBar(epVerticalSlider, .scrollbar):
    !TopRight(-10, -89)
    !BottomRight(-10, 49)
    OnLoad:
      *ep.slider(self, {ep.item.collector.update, self:GetParent()})
  EditBox $parentSearch(epEditBox, .search):
    !BottomLeft(10, 10)
    !BottomRight(-94, 10)
    OnLoad:
      *ep.editbox(self, ep_'search')
  Button $parentOptions(epDropBox, .options, text: 'Backpack'):
    !Size(80, 19)
    !BottomRight(-10, 10)
    OnClick:
      *self.menu:toggle()
  OnLoad:
    *ep.item.collector(self)

Frame epItemEditor(epPanel, ^UIParent, frameStrata: DIALOG, hidden, virtual):
  !Size(455, 350)
  !Center
  !Border:
    Texture $parentLowerDivider(epControlInnerEdgeB, .lowerDivider):
      !BottomLeft(5, 30)
      !BottomRight(-5, 30)
  Button $parentIcon(epIconBox, .f_icon):
    !Size(42, 42)
    !TopLeft(10, -31)
    OnClick:
      *epIconBrowser:display({self.set, self}, self:parent())
  EditBox $parentName(epEditBox, .f_name):
    !TopLeft(56, -31)
    !TopRight(-159, -31)
    OnLoad:
      *ep.editbox(self, ep_'name')
    OnTabPressed:
      *self:parent().f_inscription:SetFocus()
  Button $parentClass(epDropBox, .f_class):
    !Size(100, 19)
    !TopRight(-10, -31)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'class:')
    OnLoad:
      *ep.dropbox(self, {default='it'})
  EditBox $parentInscription(epEditBox, .f_inscription):
    !TopLeft(56, -54)
    !TopRight(-159, -54)
    OnLoad:
      *ep.editbox(self, ep_'inscription')
    OnTabPressed:
      *self:parent().facets:SetFocus()
  Button $parentQuality(epDropBox, .f_quality):
    !Size(100, 19)
    !TopRight(-10, -54)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'quality:')
    OnLoad:
      *ep.dropbox(self, {default='c', items=ep.items.qualityMenuItems,
      *  tooltip=ep_'$item-quality-tooltip'})
  EditBox $parentFacets(epEditBox, .f_facets):
    !TopLeft(10, -77)
    !TopRight(-159, -77)
    OnLoad:
      *ep.editbox(self, ep_'facets')
  Button $parentSound(epDropBox, .f_sound):
    !Size(100, 19)
    !TopRight(-10, -77)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'sounds:')
    OnLoad:
      *ep.dropbox(self, {default='it', items=ep.items.soundMenuItems})
  Frame $parentSelector(epTree, .selector):
    !Size(x: 100)
    !TopLeft(10, -100)
    !BottomLeft(10, 87)
    OnLoad:
      *ep.tree(self, {flat=true, callback={ep.item.editor.selectSection, self}})
  Frame $parentSections(epMultiFrame, .sections):
    !TopLeft(104, -100)
    !BottomRight(-10, 87)
    Frame $parentDescription(epEditAreaBase, .f_description, hidden):
      !TopLeft(10, 0)
      !BottomRight
      OnLoad:
        *ep.editarea(self, ep_'Click here to edit the description of this item.')
    OnLoad:
      *ep.multiframe(self, {
      *  Description = {client='Description'},
      *}, {defaultFrame='Description'})
      *self:hideBorders('tl', 'l', 'bl')
  CheckButton $parentEquippable(epCheckBox, .f_equippable, text: 'equippable:'):
    !BottomLeft(10, 66)
    OnClick:
      *self:GetParent():toggleEquippable()
  Button $parentSlot(epDropBox, .f_slot):
    !Size(90, 19)
    !BottomLeft(89, 64)
    OnLoad:
      *ep.dropbox(self, {default='nn', items=ep.items.slotMenuItems})
  EditBox $parentArchetype(epComboBox, .f_archetype):
    !Size(160, 19)
    !BottomRight(-10, 64)
    !Artwork:
      FontString(epLeftLabel, .label, text: 'archetype:')
    OnLoad:
      *ep.combobox(self)
  CheckButton $parentStackable(epCheckBox, .f_stackable, text: 'stackable:'):
    !BottomLeft(10, 44)
    OnClick:
      *self:GetParent():toggleStackable()
  EditBox $parentQuantity(epSpinner, .f_quantity):
    !Size(50, 19)
    !BottomLeft(89, 42)
    OnLoad:
      *ep.spinner(self, {minimum=1, maximum=999, step=1})
  CheckButton $parentHasWeight(epCheckBox, .f_hasweight, text: 'weight:'):
    !BottomLeft(160, 44)
    OnClick:
      *self:GetParent():toggleWeight()
  EditBox $parentWeight(epSpinner, .f_weight):
    !Size(60, 19)
    !BottomLeft(222, 42)
    OnLoad:
      *ep.spinner(self, {minimum=0, maximum=9999, step=1, precision=1})
  CheckButton $parentDisabled(epCheckBox, .f_disabled, text: 'disabled'):
    !BottomLeft(10, 12)
    OnLoad:
      *ep.checkbox(self, false, ep_('$entity-disabled-tooltip'))
  CheckButton $parentProtected(epCheckBox, .f_protected, text: 'protected'):
    !BottomLeft(89, 12)
    OnLoad:
      *ep.checkbox(self, false, ep_('$entity-protected-tooltip'))
  CheckButton $parentDebugging(epCheckBox, .f_debugging, text: 'debugging'):
    !BottomLeft(168, 12)
    OnLoad:
      *ep.checkbox(self, false, ep_('$entity-debugging-tooltip'))
  Button $parentActions(epMultiButton, .actions, text: 'Save'):
    !Size(100, 19)
    !BottomRight(-10, 11)
    OnClick:
      *self:parent():save()
    OnLoad:
      *local parent = self:GetParent()
      *ep.multibutton(self, {items = {
      *  {label = ep_'Discard', callback = {parent.discard, parent}}
      *}})
  OnLoad:
    *ep.item.editor(self)
